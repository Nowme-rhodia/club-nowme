// scripts/setup-migration.js
// Script pour configurer l'environnement de migration

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// Configuration pour ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Cr√©er le dossier migrations s'il n'existe pas
const migrationsDir = path.join(process.cwd(), 'migrations');
if (!fs.existsSync(migrationsDir)) {
  fs.mkdirSync(migrationsDir, { recursive: true });
  console.log('‚úÖ Dossier migrations cr√©√©');
}

// Cr√©er le fichier .env s'il n'existe pas
const envPath = path.join(process.cwd(), '.env');
if (!fs.existsSync(envPath)) {
  const envContent = `# Configuration Supabase
SUPABASE_URL=https://votre-projet.supabase.co
SUPABASE_SERVICE_ROLE_KEY=votre-cl√©-service-role
# Ne partagez jamais ce fichier ou ces cl√©s - ajoutez .env √† votre .gitignore
`;
  fs.writeFileSync(envPath, envContent);
  console.log('‚úÖ Fichier .env cr√©√© (√† compl√©ter avec vos informations)');
}

// V√©rifier si les d√©pendances n√©cessaires sont install√©es
try {
  // V√©rifier si les d√©pendances sont install√©es en v√©rifiant package.json
  const packageJsonPath = path.join(process.cwd(), 'package.json');
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  const deps = packageJson.dependencies || {};
  
  if (!deps['@supabase/supabase-js']) {
    console.log('üì¶ Installation de @supabase/supabase-js...');
    execSync('npm install @supabase/supabase-js', { stdio: 'inherit' });
  } else {
    console.log('‚úÖ @supabase/supabase-js est d√©j√† install√©');
  }
  
  if (!deps['dotenv']) {
    console.log('üì¶ Installation de dotenv...');
    execSync('npm install dotenv', { stdio: 'inherit' });
  } else {
    console.log('‚úÖ dotenv est d√©j√† install√©');
  }
} catch (e) {
  console.error('Erreur lors de la v√©rification des d√©pendances:', e);
}

// Mettre √† jour package.json avec les scripts de migration
const packageJsonPath = path.join(process.cwd(), 'package.json');
if (fs.existsSync(packageJsonPath)) {
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  
  // Ajouter les scripts de migration s'ils n'existent pas d√©j√†
  packageJson.scripts = packageJson.scripts || {};
  
  if (!packageJson.scripts['db:list']) {
    packageJson.scripts['db:list'] = 'node scripts/db-migrate.js --list';
  }
  
  if (!packageJson.scripts['db:create']) {
    packageJson.scripts['db:create'] = 'node scripts/db-migrate.js --create';
  }
  
  if (!packageJson.scripts['db:run']) {
    packageJson.scripts['db:run'] = 'node scripts/db-migrate.js --run';
  }
  
  if (!packageJson.scripts['db:push']) {
    packageJson.scripts['db:push'] = 'node scripts/db-migrate.js --push';
  }
  
  if (!packageJson.scripts['db:reset']) {
    packageJson.scripts['db:reset'] = 'node scripts/db-migrate.js --reset';
  }
  
  // √âcrire le package.json mis √† jour
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
  console.log('‚úÖ Scripts de migration ajout√©s √† package.json');
}

console.log('\nüöÄ Configuration termin√©e!');
console.log('\nPour utiliser le syst√®me de migration:');
console.log('1. Compl√©tez le fichier .env avec vos informations Supabase');
console.log('2. Utilisez les commandes suivantes:');
console.log('   - npm run db:list   - Liste toutes les migrations et leur statut');
console.log('   - npm run db:create nom_migration - Cr√©e une nouvelle migration');
console.log('   - npm run db:run nom_fichier.sql  - Ex√©cute une migration sp√©cifique');
console.log('   - npm run db:push   - Ex√©cute toutes les migrations en attente');
console.log('   - npm run db:reset  - R√©initialise la base de donn√©es (avec --confirm)');
console.log('\nExemple:');
console.log('npm run db:create add_users_table');
console.log('npm run db:push');