#!/usr/bin/env node

import { execSync } from 'child_process';
import dotenv from 'dotenv';
import { program } from 'commander';
import fs from 'fs';
import path from 'path';
import chalk from 'chalk';

program
  .version('1.0.0')
  .description('Script de migration Supabase pour Nowme')
  .option('-d, --direction <type>', 'Direction de la migration (up, down)', 'up')
  .option('-n, --dry-run', 'Simuler la migration sans l\'ex√©cuter')
  .option('-v, --verbose', 'Afficher plus de d√©tails')
  .parse(process.argv);

const options = program.opts();

// Charger les variables d'environnement
dotenv.config();

const projectId = 'dqfyuhwrjozoxadkccdj';

// V√©rifier si la CLI Supabase est install√©e
function checkSupabaseCLI() {
  try {
    const version = execSync('supabase --version', { stdio: 'pipe' }).toString().trim();
    console.log(chalk.green(`‚úÖ Supabase CLI d√©tect√©e: ${version}`));
    return true;
  } catch (error) {
    console.error(chalk.red('‚ùå Supabase CLI non trouv√©e. Veuillez l\'installer:'));
    console.log(chalk.yellow('npm install -g supabase'));
    return false;
  }
}

// V√©rifier si le fichier .env.local existe avec les variables n√©cessaires
function checkEnvFile() {
  const envFiles = ['.env', '.env.local'];
  let dbPassword = process.env.SUPABASE_DB_PASSWORD;
  
  if (!dbPassword) {
    for (const envFile of envFiles) {
      if (fs.existsSync(envFile)) {
        const content = fs.readFileSync(envFile, 'utf8');
        const match = content.match(/SUPABASE_DB_PASSWORD=(.+)/);
        if (match && match[1]) {
          dbPassword = match[1].trim();
          process.env.SUPABASE_DB_PASSWORD = dbPassword;
          console.log(chalk.green(`‚úÖ Mot de passe DB trouv√© dans ${envFile}`));
          break;
        }
      }
    }
  }
  
  if (!dbPassword) {
    console.error(chalk.red('‚ùå Variable SUPABASE_DB_PASSWORD non trouv√©e'));
    return false;
  }
  
  return true;
}

// V√©rifier si le r√©pertoire des migrations existe
function checkMigrationsDir() {
  const migrationsDir = path.join(process.cwd(), 'supabase/migrations');
  if (!fs.existsSync(migrationsDir)) {
    console.error(chalk.red('‚ùå R√©pertoire des migrations non trouv√©:'), migrationsDir);
    return false;
  }
  
  const migrations = fs.readdirSync(migrationsDir).filter(f => f.endsWith('.sql'));
  if (migrations.length === 0) {
    console.warn(chalk.yellow('‚ö†Ô∏è Aucun fichier de migration trouv√©'));
    return false;
  }
  
  console.log(chalk.green(`‚úÖ ${migrations.length} fichiers de migration trouv√©s`));
  
  if (options.verbose) {
    migrations.sort().forEach(migration => {
      console.log(chalk.blue(`  - ${migration}`));
    });
  }
  
  return true;
}

async function runMigrations() {
  try {
    console.log(chalk.blue(`üöÄ D√©marrage des migrations pour le projet ${projectId}`));
    console.log(chalk.blue('‚ïê'.repeat(50)));
    
    // V√©rifications pr√©alables
    const cliInstalled = checkSupabaseCLI();
    const envOk = checkEnvFile();
    const migrationsOk = checkMigrationsDir();
    
    if (!cliInstalled || !envOk || !migrationsOk) {
      console.error(chalk.red('‚ùå V√©rifications pr√©alables √©chou√©es. R√©solvez les probl√®mes ci-dessus.'));
      process.exit(1);
    }
    
    // Construire la commande de migration
    const dbPassword = process.env.SUPABASE_DB_PASSWORD;
    const dbUrl = `postgresql://postgres:${dbPassword}@db.${projectId}.supabase.co:5432/postgres`;
    
    let command = `supabase db push --db-url "${dbUrl}"`;
    
    if (options.direction === 'down') {
      command += ' --dry-run'; // La CLI ne supporte pas nativement le rollback, donc on simule
      console.warn(chalk.yellow('‚ö†Ô∏è Le rollback n\'est pas directement support√©. Simulation uniquement.'));
    }
    
    if (options.dryRun) {
      command += ' --dry-run';
      console.log(chalk.yellow('üîç Mode simulation activ√© (dry-run)'));
    }
    
    console.log(chalk.blue('\nüîß Ex√©cution de la commande:'));
    // Masquer le mot de passe dans l'affichage
    console.log(chalk.gray(command.replace(dbPassword, '********')));
    
    if (!options.dryRun) {
      console.log(chalk.blue('\nüìã R√©sultat:'));
      execSync(command, { stdio: 'inherit' });
      console.log(chalk.green('\n‚úÖ Migrations termin√©es avec succ√®s'));
    } else {
      console.log(chalk.yellow('\n‚è≠Ô∏è Simulation termin√©e (aucune modification appliqu√©e)'));
    }
    
  } catch (error) {
    console.error(chalk.red('\n‚ùå Erreur lors des migrations:'), error.message);
    process.exit(1);
  }
}

runMigrations();