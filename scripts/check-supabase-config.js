#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Fonction pour charger les variables d'environnement depuis .env (optionnel)
function loadEnvFile() {
  try {
    const envPath = path.join(process.cwd(), '.env');
    if (fs.existsSync(envPath)) {
      const envContent = fs.readFileSync(envPath, 'utf8');
      
      envContent.split('\n').forEach(line => {
        const [key, ...valueParts] = line.split('=');
        if (key && valueParts.length > 0) {
          const value = valueParts.join('=').trim();
          if (!process.env[key]) {
            process.env[key] = value;
          }
        }
      });
      console.log('‚úÖ Fichier .env charg√©');
    } else {
      console.log('‚ÑπÔ∏è Pas de fichier .env local, utilisation des variables d\'environnement syst√®me');
    }
  } catch (error) {
    console.log('‚ÑπÔ∏è Pas de fichier .env, utilisation des variables d\'environnement syst√®me');
  }
}

// Charger les variables d'environnement si disponibles
loadEnvFile();

console.log('üîç V√©rification de la configuration Supabase...');

// V√©rifier les variables d'environnement n√©cessaires
const requiredEnvVars = ['VITE_SUPABASE_URL', 'VITE_SUPABASE_ANON_KEY'];
const missingEnvVars = requiredEnvVars.filter(envVar => !process.env[envVar]);

if (missingEnvVars.length > 0) {
  console.log('‚ö†Ô∏è Variables d\'environnement manquantes dans le processus:', missingEnvVars.join(', '));
  
  // En environnement CI, les variables peuvent √™tre disponibles diff√©remment
  if (process.env.CI || process.env.GITHUB_ACTIONS) {
    console.log('‚ÑπÔ∏è Environnement CI d√©tect√© - les variables devraient √™tre inject√©es par GitHub Actions');
    
    // V√©rifier si les variables sont d√©finies mais vides
    requiredEnvVars.forEach(envVar => {
      const value = process.env[envVar];
      if (value === undefined) {
        console.log(`‚ùå ${envVar}: non d√©finie`);
      } else if (value === '') {
        console.log(`‚ö†Ô∏è ${envVar}: d√©finie mais vide`);
      } else {
        console.log(`‚úÖ ${envVar}: d√©finie (${value.substring(0, 10)}...)`);
      }
    });
  } else {
    console.error('‚ùå Variables d\'environnement manquantes:', missingEnvVars.join(', '));
    console.log('üí° Assure-toi que les variables sont d√©finies dans ton environnement ou dans un fichier .env');
    process.exit(1);
  }
}

// V√©rifier si les URLs sont valides (seulement si d√©finies)
if (process.env.VITE_SUPABASE_URL) {
  try {
    new URL(process.env.VITE_SUPABASE_URL);
    console.log('‚úÖ VITE_SUPABASE_URL est une URL valide');
  } catch (error) {
    console.error('‚ùå VITE_SUPABASE_URL n\'est pas une URL valide');
    process.exit(1);
  }
}

// V√©rifier si la cl√© anon a un format valide (seulement si d√©finie)
if (process.env.VITE_SUPABASE_ANON_KEY) {
  if (process.env.VITE_SUPABASE_ANON_KEY.length < 30) {
    console.error('‚ùå VITE_SUPABASE_ANON_KEY semble invalide (trop courte)');
    process.exit(1);
  } else {
    console.log('‚úÖ VITE_SUPABASE_ANON_KEY a un format valide');
  }
}

// V√©rifier si le r√©pertoire des fonctions Edge existe
const supabaseFunctionsDir = path.join(process.cwd(), 'supabase', 'functions');
if (!fs.existsSync(supabaseFunctionsDir)) {
  console.warn('‚ö†Ô∏è Le r√©pertoire des fonctions Supabase n\'existe pas');
} else {
  // V√©rifier les fonctions Edge
  try {
    const edgeFunctions = fs.readdirSync(supabaseFunctionsDir)
      .filter(file => fs.statSync(path.join(supabaseFunctionsDir, file)).isDirectory());

    if (edgeFunctions.length === 0) {
      console.warn('‚ö†Ô∏è Aucune fonction Edge trouv√©e');
    } else {
      console.log(`‚úÖ ${edgeFunctions.length} fonctions Edge trouv√©es: ${edgeFunctions.join(', ')}`);
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la lecture du r√©pertoire des fonctions Edge:', error);
  }
}

// V√©rifier les migrations
const migrationsDir = path.join(process.cwd(), 'supabase', 'migrations');
if (fs.existsSync(migrationsDir)) {
  try {
    const migrations = fs.readdirSync(migrationsDir)
      .filter(file => file.endsWith('.sql'));
    
    if (migrations.length > 0) {
      console.log(`‚úÖ ${migrations.length} migrations trouv√©es`);
    } else {
      console.warn('‚ö†Ô∏è Aucune migration trouv√©e');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la lecture des migrations:', error);
  }
} else {
  console.warn('‚ö†Ô∏è R√©pertoire des migrations non trouv√©');
}

console.log('‚úÖ V√©rification de la configuration Supabase termin√©e');

// En environnement CI, on consid√®re que c'est OK m√™me si les variables ne sont pas visibles
if (process.env.CI || process.env.GITHUB_ACTIONS) {
  console.log('‚ÑπÔ∏è Environnement CI - configuration consid√©r√©e comme valide');
  process.exit(0);
} else if (missingEnvVars.length > 0) {
  process.exit(1);
} else {
  process.exit(0);
}