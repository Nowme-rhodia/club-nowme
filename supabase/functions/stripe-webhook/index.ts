import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import Stripe from 'https://esm.sh/stripe@13.11.0';
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.39.7";

// Initialisation des cl√©s
const stripe = new Stripe(Deno.env.get('STRIPE_SECRET_KEY')!, { apiVersion: '2023-10-16' });
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// CORS headers
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  let event: Stripe.Event | null = null;
  let stripeWebhookId: string | null = null;

  try {
    const signature = req.headers.get('stripe-signature');
    const body = await req.text();

    if (!signature) {
      throw new Error("‚ùå Stripe signature is missing.");
    }

    console.log("üîπ V√©rification Stripe Webhook...");
    event = await stripe.webhooks.constructEventAsync(
      body,
      signature,
      Deno.env.get('STRIPE_WEBHOOK_SECRET')!
    );

    stripeWebhookId = event.id;
    console.log(`‚úÖ Event re√ßu: ${event.type}`);

    const stripeData = event.data.object as Stripe.Checkout.Session;
    const customerEmail = stripeData.customer_email || null;
    const stripeCustomerId = stripeData.customer as string || null;
    const subscriptionId = stripeData.subscription as string || null;

    if (!customerEmail) {
      throw new Error("‚ùå Email client manquant dans l'√©v√©nement Stripe");
    }

    console.log("üì• Enregistrement de l'√©v√©nement dans stripe_webhook_events...");
    console.log("üîç Debug : Email =", customerEmail, " | Customer ID =", stripeCustomerId, " | Subscription ID =", subscriptionId);

    // üü¢ Enregistrement de l'√©v√©nement Stripe
    const { data: webhookEvent, error: logError } = await supabase
      .from('stripe_webhook_events')
      .insert({
        stripe_event_id: event.id,
        event_type: event.type,
        customer_id: stripeCustomerId,
        customer_email: customerEmail,
        subscription_id: subscriptionId,
        amount: stripeData.amount_total || null,
        status: 'processing',
        raw_event: event
      })
      .select()
      .single();

    if (logError) {
      console.error('‚ùå Erreur lors de l\'enregistrement dans stripe_webhook_events:', logError);
      throw logError;
    }

    if (!webhookEvent) {
      throw new Error("‚ùå √âchec de l'enregistrement de l'√©v√©nement webhook");
    }

    console.log(`üéØ Traitement de l'√©v√©nement Stripe: ${event.type}`);

    // Recherche de l'utilisateur existant
    const { data: userProfile, error: profileError } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('email', customerEmail)
      .single();

    if (profileError && profileError.code !== 'PGRST116') { // PGRST116 = not found
      console.error('‚ùå Erreur lors de la recherche du profil:', profileError);
      throw profileError;
    }

    // Traitement selon le type d'√©v√©nement
    switch (event.type) {
      case 'checkout.session.completed': {
        console.log('‚úÖ Checkout session r√©ussie');
        
        if (!userProfile) {
          // G√©n√©rer un mot de passe temporaire
          const tempPassword = crypto.randomUUID();

          // Cr√©er un nouvel utilisateur dans auth.users
          const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
            email: customerEmail,
            password: tempPassword,
            email_confirm: true,
            user_metadata: {
              stripe_customer_id: stripeCustomerId,
              needs_password_reset: true
            }
          });

          if (authError) {
            console.error('‚ùå Erreur cr√©ation utilisateur auth:', authError);
            throw authError;
          }

          if (!authUser?.user) {
            throw new Error('‚ùå Utilisateur auth non cr√©√©');
          }

          // Cr√©er le profil utilisateur
          const { error: insertError } = await supabase
            .from('user_profiles')
            .insert({
              user_id: authUser.user.id,
              email: customerEmail,
              first_name: 'Nouveau',
              last_name: 'Membre',
              phone: '+33000000000',
              stripe_customer_id: stripeCustomerId,
              stripe_subscription_id: subscriptionId,
              subscription_status: 'active'
            });

          if (insertError) {
            console.error('‚ùå Erreur cr√©ation profil:', insertError);
            throw insertError;
          }

          // Envoyer un email de bienvenue avec lien de r√©initialisation
          const { data: resetData, error: resetError } = await supabase.auth.admin
            .generateLink({
              type: 'recovery',
              email: customerEmail
            });

          if (resetError) {
            console.error('‚ùå Erreur g√©n√©ration lien reset:', resetError);
            throw resetError;
          }

          // Enregistrer l'email √† envoyer
          const { error: emailError } = await supabase
            .from('emails')
            .insert({
              to_address: customerEmail,
              subject: 'Bienvenue sur Nowme !',
              content: `
                Bienvenue sur Nowme !

                Votre compte a √©t√© cr√©√© avec succ√®s. Pour commencer √† utiliser nos services,
                veuillez d√©finir votre mot de passe en cliquant sur le lien ci-dessous :

                ${resetData?.properties?.action_link}

                Ce lien est valable pendant 24h.

                √Ä tr√®s vite !
                L'√©quipe Nowme
              `,
              status: 'pending'
            });

          if (emailError) {
            console.error('‚ùå Erreur enregistrement email:', emailError);
            throw emailError;
          }

        } else {
          // Mise √† jour du profil existant
          const { error: updateError } = await supabase
            .from('user_profiles')
            .update({
              subscription_status: 'active',
              stripe_customer_id: stripeCustomerId,
              stripe_subscription_id: subscriptionId
            })
            .eq('id', userProfile.id);

          if (updateError) {
            console.error('‚ùå Erreur mise √† jour profil:', updateError);
            throw updateError;
          }
        }
        break;
      }

      case 'invoice.payment_succeeded': {
        console.log('‚úÖ Paiement r√©ussi');
        if (userProfile) {
          const { error: updateError } = await supabase
            .from('user_profiles')
            .update({
              subscription_status: 'active',
              stripe_customer_id: stripeCustomerId,
              stripe_subscription_id: subscriptionId
            })
            .eq('id', userProfile.id);

          if (updateError) {
            console.error('‚ùå Erreur mise √† jour profil:', updateError);
            throw updateError;
          }
        }
        break;
      }

      case 'invoice.payment_failed': {
        console.log('‚ö†Ô∏è Paiement √©chou√©');
        if (userProfile) {
          const { error: updateError } = await supabase
            .from('user_profiles')
            .update({
              subscription_status: 'payment_failed'
            })
            .eq('id', userProfile.id);

          if (updateError) {
            console.error('‚ùå Erreur mise √† jour profil:', updateError);
            throw updateError;
          }

          // Envoyer un email de notification
          const { error: emailError } = await supabase
            .from('emails')
            .insert({
              to_address: customerEmail,
              subject: '√âchec du paiement de votre abonnement',
              content: `
                Bonjour,

                Le paiement de votre abonnement Nowme a √©chou√©.
                Pour √©viter toute interruption de service, veuillez mettre √† jour vos informations de paiement
                dans votre espace membre.

                Si vous avez des questions, n'h√©sitez pas √† nous contacter.

                L'√©quipe Nowme
              `,
              status: 'pending'
            });

          if (emailError) {
            console.error('‚ùå Erreur enregistrement email:', emailError);
            throw emailError;
          }
        }
        break;
      }

      case 'customer.subscription.deleted': {
        console.log('‚ùå Abonnement annul√©');
        if (userProfile) {
          const { error: updateError } = await supabase
            .from('user_profiles')
            .update({
              subscription_status: 'cancelled'
            })
            .eq('id', userProfile.id);

          if (updateError) {
            console.error('‚ùå Erreur mise √† jour profil:', updateError);
            throw updateError;
          }

          // Envoyer un email de confirmation
          const { error: emailError } = await supabase
            .from('emails')
            .insert({
              to_address: customerEmail,
              subject: 'Confirmation d\'annulation de votre abonnement',
              content: `
                Bonjour,

                Nous confirmons l'annulation de votre abonnement Nowme.
                Vous pouvez continuer √† profiter de nos services jusqu'√† la fin de votre p√©riode en cours.

                Nous esp√©rons vous revoir bient√¥t !

                L'√©quipe Nowme
              `,
              status: 'pending'
            });

          if (emailError) {
            console.error('‚ùå Erreur enregistrement email:', emailError);
            throw emailError;
          }
        }
        break;
      }

      default:
        console.log(`‚ÑπÔ∏è √âv√©nement non trait√©: ${event.type}`);
    }

    // ‚úÖ Marquer l'√©v√©nement comme trait√©
    if (webhookEvent) {
      console.log("‚úÖ Marquage de l'√©v√©nement comme 'completed'");
      const { error: updateStatusError } = await supabase
        .from('stripe_webhook_events')
        .update({ status: 'completed' })
        .eq('id', webhookEvent.id);

      if (updateStatusError) {
        console.error('‚ùå Erreur mise √† jour du statut webhook:', updateStatusError);
        throw updateStatusError;
      }
    }

    return new Response(JSON.stringify({ received: true }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    console.error('‚ùå Erreur lors du traitement du webhook:', error);

    // Enregistrer l'erreur dans stripe_webhook_events si on a l'ID de l'√©v√©nement
    if (stripeWebhookId) {
      try {
        const { error: updateError } = await supabase
          .from('stripe_webhook_events')
          .update({ 
            status: 'failed',
            error: error.message
          })
          .eq('stripe_event_id', stripeWebhookId);

        if (updateError) {
          console.error('‚ùå Impossible de mettre √† jour le statut de l\'√©v√©nement:', updateError);
        }
      } catch (logError) {
        console.error('‚ùå Impossible d\'enregistrer l\'erreur:', logError);
      }
    }

    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400 
      }
    );
  }
});