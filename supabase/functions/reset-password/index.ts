// reset-password.ts
import { createClient } from 'npm:@supabase/supabase-js@2.38.4';

Deno.serve(async (req) => {
  // Gestion des requ√™tes CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      status: 204,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization'
      }
    });
  }

  // V√©rification de la m√©thode HTTP
  if (req.method !== 'POST') {
    return new Response(JSON.stringify({ error: 'M√©thode non autoris√©e' }), {
      status: 405,
      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }
    });
  }

  try {
    // R√©cup√©ration du corps de la requ√™te et du token d'authentification
    const { password } = await req.json();
    const authHeader = req.headers.get('Authorization');
    const token = authHeader?.replace('Bearer ', '');

    console.log('üìù Demande de r√©initialisation de mot de passe re√ßue');
    console.log('üîë Token pr√©sent:', !!token);

    // Validation des entr√©es
    if (!password) {
      console.log('‚ùå Mot de passe manquant');
      return new Response(JSON.stringify({ error: 'Mot de passe manquant' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }
      });
    }

    if (!token) {
      console.log('‚ùå Token d\'authentification manquant');
      return new Response(JSON.stringify({ error: 'Token d\'authentification manquant' }), {
        status: 401,
        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }
      });
    }

    // Validation du mot de passe
    if (password.length < 8) {
      console.log('‚ùå Mot de passe trop court');
      return new Response(JSON.stringify({ error: 'Le mot de passe doit contenir au moins 8 caract√®res' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }
      });
    }

    // Initialisation du client Supabase avec les variables d'environnement
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const serviceRole = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

    if (!supabaseUrl || !serviceRole) {
      console.error('‚ùå Variables d\'environnement manquantes');
      return new Response(JSON.stringify({ error: 'Configuration du serveur incorrecte' }), {
        status: 500,
        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }
      });
    }

    // Cr√©ation du client Supabase avec le r√¥le de service
    const supabase = createClient(supabaseUrl, serviceRole);

    console.log('üîÑ Tentative de mise √† jour du mot de passe...');

    // M√âTHODE 1: Utiliser updateUser avec le token d'acc√®s
    const { data, error } = await supabase.auth.updateUser(
      { password },
      { accessToken: token }
    );

    if (error) {
      console.error('‚ùå Erreur lors de la mise √† jour:', error.message);
      
      // Gestion sp√©cifique des erreurs
      if (error.message.includes('rate limit')) {
        return new Response(JSON.stringify({ error: 'Trop de tentatives. Veuillez r√©essayer plus tard.' }), {
          status: 429,
          headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }
        });
      }
      
      if (error.message.includes('token')) {
        return new Response(JSON.stringify({ error: 'Token invalide ou expir√©' }), {
          status: 401,
          headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }
        });
      }

      return new Response(JSON.stringify({ error: error.message }), {
        status: 400,
        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }
      });
    }

    // V√©rification que l'utilisateur a bien √©t√© mis √† jour
    if (!data?.user) {
      console.error('‚ùå Aucune donn√©e utilisateur retourn√©e');
      return new Response(JSON.stringify({ error: '√âchec de la mise √† jour du mot de passe' }), {
        status: 500,
        headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }
      });
    }

    console.log('‚úÖ Mot de passe mis √† jour avec succ√®s');

    // R√©ponse de succ√®s
    return new Response(JSON.stringify({
      success: true,
      message: 'Mot de passe mis √† jour avec succ√®s',
      user: {
        id: data.user.id,
        email: data.user.email,
        updated_at: data.user.updated_at
      }
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }
    });
  } catch (err) {
    // Gestion des erreurs inattendues
    console.error('üí• Erreur inattendue:', err.message);
    return new Response(JSON.stringify({ error: 'Une erreur inattendue est survenue' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' }
    });
  }
});